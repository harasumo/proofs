import asyncio
import subprocess
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from config import TELEGRAM_TOKEN

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

class FormFilling(StatesGroup):
    waiting_for_form_url = State()
    waiting_for_field_values = State()

def get_main_menu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å Google –§–æ—Ä–º—É")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ")]
        ],
        resize_keyboard=True
    )
    return keyboard

@dp.message(Command("start"))
async def start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ 'üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å Google –§–æ—Ä–º—É', —á—Ç–æ–±—ã —è –ø–æ–º–æ–≥ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É.",
        reply_markup=get_main_menu()
    )

@dp.message(F.text == "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å Google –§–æ—Ä–º—É")
async def ask_form_url(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ Google –§–æ—Ä–º—É.")
    await state.set_state(FormFilling.waiting_for_form_url)

@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ")
async def cancel_filling(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üö´ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())

@dp.message(FormFilling.waiting_for_form_url)
async def analyze_form(message: Message, state: FSMContext):
    form_url = message.text.strip()
    if not form_url.startswith("http"):
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Google –§–æ—Ä–º—É.")
        return

    await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ä–º—É...")
    try:
        result = subprocess.run(
            ["python3", "rpa_fill_google_form.py", "analyze", form_url],
            capture_output=True,
            text=True
        )
        num_fields = int(result.stdout.strip())
        if num_fields == 0:
            await message.answer("‚ö†Ô∏è –í —Ñ–æ—Ä–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É.")
            await state.clear()
            return

        await state.update_data(form_url=form_url, num_fields=num_fields, field_values=[])
        await message.answer(f"‚úÖ –í —Ñ–æ—Ä–º–µ –Ω–∞–π–¥–µ–Ω–æ {num_fields} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π. –î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –∏—Ö –ø–æ –ø–æ—Ä—è–¥–∫—É.\n–ß—Ç–æ –≤–≤–µ—Å—Ç–∏ –≤ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ?")
        await state.set_state(FormFilling.waiting_for_field_values)
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ä–º—ã: {e}")
        await state.clear()

@dp.message(FormFilling.waiting_for_field_values)
async def collect_field_values(message: Message, state: FSMContext):
    data = await state.get_data()
    field_values = data.get('field_values', [])
    num_fields = data.get('num_fields', 0)

    field_values.append(message.text.strip())
    if len(field_values) < num_fields:
        await state.update_data(field_values=field_values)
        await message.answer(f"–ß—Ç–æ –≤–≤–µ—Å—Ç–∏ –≤ –ø–æ–ª–µ ‚Ññ{len(field_values)+1}?")
    else:
        await state.update_data(field_values=field_values)
        form_url = data.get('form_url')

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        result_message = "üöÄ –û—Ç–ª–∏—á–Ω–æ! –Ø –∑–∞–ø–æ–ª–Ω—é —Ñ–æ—Ä–º—É —Å —ç—Ç–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏:\n"
        for idx, value in enumerate(field_values, start=1):
            result_message += f"{idx}Ô∏è‚É£ {value}\n"
        result_message += f"–§–æ—Ä–º–∞: {form_url}\n\n–ó–∞–ø—É—Å–∫–∞—é —Å–∫—Ä–∏–ø—Ç..."

        await message.answer(result_message)

        try:
            result = subprocess.run(
                ["python3", "rpa_fill_google_form.py", "fill", form_url] + field_values,
                capture_output=True,
                text=True
            )
            await message.answer(f"–†–µ–∑—É–ª—å—Ç–∞—Ç:\n{result.stdout}")
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ RPA-—Å–∫—Ä–∏–ø—Ç–∞: {e}")

        await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
