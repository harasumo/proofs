import os
import json
import uuid
import logging
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

# ‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî
BOT_TOKEN = os.getenv("BOT_TOKEN") or "token from tg"
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID") or 882607004)
TARGET_CHANNEL_ID = int(os.getenv("TARGET_CHANNEL_ID") or -1002533354742)

PENDING_FILE = "pending_requests.json"

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
bot = Bot(BOT_TOKEN)
dp = Dispatcher()

# ‚Äî –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞ ‚Äî
try:
    with open(PENDING_FILE, "r", encoding="utf-8") as f:
        pending_requests = json.load(f)
except (FileNotFoundError, json.JSONDecodeError):
    pending_requests = {}

def save_pending():
    with open(PENDING_FILE, "w", encoding="utf-8") as f:
        json.dump(pending_requests, f, ensure_ascii=False, indent=2)

# ‚Äî –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ ‚Äî
one_time_links = {}

# ‚Äî –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî
@dp.message(Command("start"))
async def cmd_start(m: types.Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì® –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤ –∫–∞–Ω–∞–ª", callback_data="request_access")]
    ])
    await m.answer("–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤ –∫–∞–Ω–∞–ª:", reply_markup=kb)

# ‚Äî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ‚Äú–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø‚Äù ‚Äî
@dp.callback_query(F.data == "request_access")
async def request_access(cq: types.CallbackQuery):
    user = cq.from_user
    request_id = str(uuid.uuid4())
    pending_requests[request_id] = user.id
    save_pending()

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve:{request_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline:{request_id}")
        ]
    ])
    text = (
        f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø:\n"
        f"<b>{user.full_name}</b> (<code>{user.id}</code>)\n"
        f"request_id: <code>{request_id}</code>"
    )
    await bot.send_message(ADMIN_CHAT_ID, text, parse_mode="HTML", reply_markup=kb)
    await cq.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

# ‚Äî –ê–¥–º–∏–Ω –æ–¥–æ–±—Ä—è–µ—Ç –∑–∞—è–≤–∫—É ‚Äî
@dp.callback_query(F.data.startswith("approve:"))
async def approve(cq: types.CallbackQuery):
    if cq.from_user.id != ADMIN_CHAT_ID:
        return await cq.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)

    request_id = cq.data.split(":", 1)[1]
    user_id = pending_requests.pop(request_id, None)
    save_pending()

    if not user_id:
        return await cq.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", show_alert=True)

    expire = datetime.now() + timedelta(minutes=2)
    link = await bot.create_chat_invite_link(
        chat_id=TARGET_CHANNEL_ID,
        member_limit=1,
        expire_date=expire
    )
    one_time_links[link.invite_link] = True

    await bot.send_message(
        user_id,
        f"–í–∞—à–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª (–¥–µ–π—Å—Ç–≤—É–µ—Ç 2 –º–∏–Ω—É—Ç—ã):\n{link.invite_link}"
    )
    await cq.message.edit_text(cq.message.text + "\n\n‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ")
    await cq.answer()

# ‚Äî –ê–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞—è–≤–∫—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å ‚Äî
@dp.callback_query(F.data.startswith("decline:"))
async def decline(cq: types.CallbackQuery):
    if cq.from_user.id != ADMIN_CHAT_ID:
        return await cq.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)

    request_id = cq.data.split(":", 1)[1]
    user_id = pending_requests.pop(request_id, None)
    save_pending()

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞—è–≤–∫–∏
    kb_retry = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="request_access")]
    ])
    if user_id:
        await bot.send_message(user_id, "–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω.", reply_markup=kb_retry)

    await cq.message.edit_text(cq.message.text + "\n\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
    await cq.answer()

# ‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏ –≤—Ä—É—á–Ω—É—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ‚Äî
@dp.message(Command("join"))
async def cmd_join(m: types.Message):
    invite = m.get_args().strip()
    if one_time_links.pop(invite, None):
        await m.reply("–°—Å—ã–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª.")
    else:
        await m.reply("–ù–µ–≤–µ—Ä–Ω–∞—è –∏–ª–∏ –∏—Å—Ç—ë–∫—à–∞—è —Å—Å—ã–ª–∫–∞.")



if __name__ == "__main__":
    dp.run_polling(bot, skip_updates=True)
